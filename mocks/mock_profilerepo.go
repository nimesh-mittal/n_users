// Code generated by MockGen. DO NOT EDIT.
// Source: n_users/repo (interfaces: ProfileRepo)

// Package mocks is a generated GoMock package.
package mocks

import (
	entity "n_users/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockProfileRepo is a mock of ProfileRepo interface.
type MockProfileRepo struct {
	ctrl     *gomock.Controller
	recorder *MockProfileRepoMockRecorder
}

// MockProfileRepoMockRecorder is the mock recorder for MockProfileRepo.
type MockProfileRepoMockRecorder struct {
	mock *MockProfileRepo
}

// NewMockProfileRepo creates a new mock instance.
func NewMockProfileRepo(ctrl *gomock.Controller) *MockProfileRepo {
	mock := &MockProfileRepo{ctrl: ctrl}
	mock.recorder = &MockProfileRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProfileRepo) EXPECT() *MockProfileRepoMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockProfileRepo) Create(arg0 entity.Profile) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockProfileRepoMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockProfileRepo)(nil).Create), arg0)
}

// Delete mocks base method.
func (m *MockProfileRepo) Delete(arg0, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockProfileRepoMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockProfileRepo)(nil).Delete), arg0, arg1)
}

// SafeClose mocks base method.
func (m *MockProfileRepo) SafeClose() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SafeClose")
}

// SafeClose indicates an expected call of SafeClose.
func (mr *MockProfileRepoMockRecorder) SafeClose() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SafeClose", reflect.TypeOf((*MockProfileRepo)(nil).SafeClose))
}

// Search mocks base method.
func (m *MockProfileRepo) Search(arg0 string, arg1, arg2 int, arg3, arg4 string) ([]entity.Profile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]entity.Profile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockProfileRepoMockRecorder) Search(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockProfileRepo)(nil).Search), arg0, arg1, arg2, arg3, arg4)
}

// Update mocks base method.
func (m *MockProfileRepo) Update(arg0, arg1 map[string]interface{}) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockProfileRepoMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockProfileRepo)(nil).Update), arg0, arg1)
}

// UploadProfileImage mocks base method.
func (m *MockProfileRepo) UploadProfileImage(arg0 string, arg1 []byte) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadProfileImage", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadProfileImage indicates an expected call of UploadProfileImage.
func (mr *MockProfileRepoMockRecorder) UploadProfileImage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadProfileImage", reflect.TypeOf((*MockProfileRepo)(nil).UploadProfileImage), arg0, arg1)
}
